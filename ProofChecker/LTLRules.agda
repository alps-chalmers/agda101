module LTLRules where

open import Nat
open import LTL
open import Identity

-- Represents LTL rules

data Ctx : Nat → Set where
  ∅ : Ctx zero
  _⋆_ : {n : Nat} → Ctx n → LTL → Ctx (succ n)

data _⊢_ : {n : Nat} → (Γ : Ctx n) → (φ : LTL) → Set where
  var   : ∀{n} {Γ : Ctx n} {ψ} → (Γ ⋆ ψ) ⊢ ψ
  weak  : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ ψ → (Γ ⋆ φ) ⊢ ψ
  T-i   : ∀{n} {Γ : Ctx n} → Γ ⊢ T
  ⊥-e   : ∀{n} {Γ : Ctx n} {ψ} → Γ ⊢ ⊥ → Γ ⊢ ψ
  ∼-i   : ∀{n} {Γ : Ctx n} {φ} → (Γ ⋆ φ) ⊢ ⊥ → Γ ⊢ ∼ φ
  ∼-e   : ∀{n} {Γ : Ctx n} {φ} → Γ ⊢ φ → Γ ⊢ (∼ φ) → Γ ⊢ ⊥
  ⇒-i   : ∀{n} {Γ : Ctx n} {φ ψ} → (Γ ⋆ φ) ⊢ ψ → Γ ⊢ (φ ⇒ ψ)
  ⇒-e   : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ (φ ⇒ ψ) → Γ ⊢ φ → Γ ⊢ ψ
  ∧-i   : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ φ → Γ ⊢ ψ → Γ ⊢ (φ ∧ ψ)
  ∧-e₁  : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ (φ ∧ ψ) → Γ ⊢ φ
  ∧-e₂  : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ (φ ∧ ψ) → Γ ⊢ ψ
  ∨-i₁  : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ φ → Γ ⊢ (φ ∨ ψ)
  ∨-i₂  : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ ψ → Γ ⊢ (φ ∨ ψ)
  ∨-e   : ∀{n} {Γ : Ctx n} {φ ψ χ} → Γ ⊢ (φ ∨ ψ) → (Γ ⋆ φ) ⊢ χ → (Γ ⋆ ψ) ⊢ χ → Γ ⊢ χ
  lem   : ∀{n} {Γ : Ctx n} {φ} → Γ ⊢ (φ ∨ (∼ φ))
  -- extended with LTL
  init→◇  : ∀{n} {Γ : Ctx n} {φ} → Γ ⊢ φ → Γ ⊢ (◇ φ)
  □-e     : ∀{n} {Γ : Ctx n} {φ} → Γ ⊢ □ φ → Γ ⊢ φ
  □→◇     : ∀{n} {Γ : Ctx n} {φ} → Γ ⊢ (□ φ) → Γ ⊢ ◇ φ
  ∼□      : ∀{n} {Γ : Ctx n} {φ} → Γ ⊢ (∼ □ φ) → Γ ⊢ ◇ (∼ φ)
  ∼◇      : ∀{n} {Γ : Ctx n} {φ} → Γ ⊢ ∼ (◇ φ) → Γ ⊢ □ (∼ φ)
  ◇-i     : ∀{n} {Γ : Ctx n} {φ} → Γ ⊢ φ → Γ ⊢ ◇ φ
  ◇-∧-e₁  : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ ◇ (φ ∧ ψ) → Γ ⊢ ◇ φ
  ◇-∧-e₂  : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ ◇ (φ ∧ ψ) → Γ ⊢ ◇ ψ
  □-∧-i   : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ □ φ → Γ ⊢ □ ψ → Γ ⊢ □ (φ ∧ ψ)
  □-∧-e₁  : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ □ (φ ∧ ψ) → Γ ⊢ □ φ
  □-∧-e₂  : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ □ (φ ∧ ψ) → Γ ⊢ □ ψ
  bla     : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ □ (φ ~> ψ) → Γ ⊢ □ (φ ~> (◇ ψ))
  □→∼>    : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ □ (φ ⇒ (◇ ψ)) → Γ ⊢ (φ ~> (◇ ψ))
  ~>→□    : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ (φ ~> (◇ ψ)) → Γ ⊢ □ (φ ⇒ (◇ ψ))
  -- □∧-i    : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ □ φ → Γ ⊢ □ ψ → Γ ⊢ (φ ∧ ψ)
  -- □→~>    : ∀{n} {Γ : Ctx n} {φ ψ} → Γ ⊢ □ (φ ⇒ ψ) → Γ ⊢ (φ ~> ψ)



∧-comm : {φ ψ : LTL} {n : Nat} {Γ : Ctx n} → Γ ⊢ (φ ∧ ψ) → Γ ⊢ (ψ ∧ φ)
∧-comm p = ∧-i (∧-e₂ p) (∧-e₁ p)

∨-comm : {φ ψ : LTL} {n : Nat} {Γ : Ctx n} → Γ ⊢ (φ ∨ ψ) → Γ ⊢ (ψ ∨ φ)
∨-comm p = ∨-e p (∨-i₂ var) (∨-i₁ var)

∧→∨ : {φ ψ : LTL} {n : Nat} {Γ : Ctx n} → Γ ⊢ (φ ∧ ψ) → Γ ⊢ (φ ∨ ψ)
∧→∨ p = ∨-i₂ (∧-e₂ p)

□→~> : {φ ψ : LTL} {n : Nat} {Γ : Ctx n} -> Γ ⊢ □ (φ ⇒ ψ) → Γ ⊢ (φ ~> ψ)
□→~> p = □-e {!  !}

□-∧-split : {φ ψ : LTL} {n : Nat} {Γ : Ctx n} -> Γ ⊢ □ (φ ∧ ψ) → Γ ⊢ ((□ φ) ∧ (□ ψ))
□-∧-split p = ∧-i (□-∧-e₁ p) (□-∧-e₂ p)

□-∧-comm : {φ ψ : LTL} {n : Nat} {Γ : Ctx n} -> Γ ⊢ □ (φ ∧ ψ) → Γ ⊢ □ (ψ ∧ φ)
□-∧-comm p = □-∧-i (□-∧-e₂ p) (□-∧-e₁ p)

TL4 : {φ ψ : LTL} -> □ (φ ∧ ψ) ≡ ((□ φ) ∧ (□ ψ))
TL4 = cong {!   !} {!   !}
